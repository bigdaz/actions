name: CI-integ-test

on:
  workflow_dispatch:
  push:

jobs:
  determine-suite:
    runs-on: ubuntu-latest
    outputs:
      runner-os: ${{ steps.determine-suite.outputs.suite == 'quick' && '["ubuntu-latest"]' || '["ubuntu-latest", "windows-latest", "macos-latest"]' }}
      cache-key-prefix: ${{ steps.determine-suite.outputs.suite == 'quick' && 'quick' || github.run_number }}
    steps:
    - name: Get current PR details
      uses: 8BitJonny/gh-get-current-pr@3.0.0
      id: PR
    - name: Determine suite to run
      id: determine-suite
      run: |
        # # Always run quick suite if we are not in the core `gradle/actions` repository
        # # This reduces the load for developers working on forks
        # if [ "${{ github.repository }}" != "gradle/actions" ]; then
        #   echo "Not in core repository: suite=quick"
        #   echo "suite=quick" >> "$GITHUB_OUTPUT"
        #   exit 0
        # fi

        # Always run quick suite for dependabot PRs
        if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
          echo "Dependabot: suite=quick"
          echo "suite=quick" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        # Run full suite for PRs
        if [ "${{ steps.PR.outputs.pr_found }}" == "false" ]; then
          echo "PR not found: suite=quick"
          echo "suite=quick" >> "$GITHUB_OUTPUT"
        else
          echo "PR found: suite=full"
          echo "suite=full" >> "$GITHUB_OUTPUT"
        fi

  build-distribution:
    needs: determine-suite
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Runner OS: ${{ needs.determine-suite.outputs.runner-os }}"
        echo "Cache key prefix: ${{ needs.determine-suite.outputs.cache-key-prefix }}"
    - name: Checkout sources
      uses: actions/checkout@v4
    - name: Build and upload distribution
      uses: ./.github/actions/build-dist

  action-inputs:
    needs: build-distribution
    uses: ./.github/workflows/integ-test-action-inputs.yml
    with:
      runner-os: '["ubuntu-latest"]'
      cache-key-prefix: ${{github.run_number}}-

  # build-scan-publish:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-build-scan-publish.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # cache-cleanup:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-cache-cleanup.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'
  #     cache-key-prefix: ${{github.run_number}}- # Requires a fresh cache entry each run

  # caching-config:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-caching-config.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # dependency-graph:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-dependency-graph.yml
  #   permissions:
  #     contents: write
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # dependency-submission:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-dependency-submission.yml
  #   permissions:
  #     contents: write
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # dependency-submission-failures:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-dependency-submission-failures.yml
  #   permissions:
  #     contents: write
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # execution-with-caching:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-execution-with-caching.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # execution:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-execution.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # develocity-injection:
  #   if: ${{ vars.HAS_GRADLE_ACTIONS_SECRETS == 'true' }}
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-inject-develocity.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'
  #   secrets:
  #     DEVELOCITY_ACCESS_KEY: ${{ secrets.GE_SOLUTIONS_ACCESS_TOKEN }}

  # provision-gradle-versions:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-provision-gradle-versions.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # restore-configuration-cache:
  #   if: ${{ vars.HAS_GRADLE_ACTIONS_SECRETS == 'true' }}
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-restore-configuration-cache.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'
  #   secrets:
  #     GRADLE_ENCRYPTION_KEY: ${{ secrets.GRADLE_ENCRYPTION_KEY }}

  # restore-containerized-gradle-home:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-restore-containerized-gradle-home.yml

  # restore-custom-gradle-home:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-restore-custom-gradle-home.yml

  # restore-gradle-home:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-restore-gradle-home.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # restore-java-toolchain:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-restore-java-toolchain.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # sample-kotlin-dsl:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-sample-kotlin-dsl.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # sample-gradle-plugin:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-sample-gradle-plugin.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'

  # toolchain-detection:
  #   needs: build-distribution
  #   uses: ./.github/workflows/integ-test-detect-java-toolchains.yml
  #   with:
  #     runner-os: '["ubuntu-latest"]'
